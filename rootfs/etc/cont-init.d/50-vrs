#!/usr/bin/with-contenv bash
#shellcheck shell=bash

APPNAME="$(hostname)/vrs-init"
VRS_DIR="/opt/vrs"
VRS_EXEC="mono VirtualRadar.exe"
VRS_CMDLINE=()
VRS_CMDLINE+=("-nogui")
VRS_CMDLINE+=("-createAdmin:${VRS_ADMIN_USERNAME}")
VRS_CMDLINE+=("-password:${VRS_ADMIN_PASSWORD}")
VRS_CONFIG_DIR="/root/.local/share/VirtualRadar"
SILH_LINK="https://github.com/rikgale/VRSOperatorFlags/raw/main/Silhouettes.zip"
FLAGS_LINK="https://github.com/rikgale/VRSOperatorFlags/raw/main/OperatorFlags.zip"
FLAGSDB_LINK="https://github.com/rikgale/VRSOperatorFlags/raw/main/BaseStation.sqb"

MAXTIME=15

echo "[$APPNAME][$(date)] Initializing Virtual Radar Server..."

mkdir -p "${VRS_CONFIG_DIR}/flags"
mkdir -p "${VRS_CONFIG_DIR}/silhouettes"
mkdir -p "${VRS_CONFIG_DIR}/photos"
mkdir -p "${VRS_CONFIG_DIR}/db"

#download and install silhouettes
if curl --compressed -s -L -o "${VRS_CONFIG_DIR}/silhouettes.zip" ${SILH_LINK} && unzip -qq -o -d "${VRS_CONFIG_DIR}/silhouettes" "${VRS_CONFIG_DIR}/silhouettes.zip"
then
  echo "[$APPNAME][$(date)] Silhouettes installed successfully"
else
    echo "[$APPNAME][$(date)] Silhouettes not installed - failure"
fi

#download and install operator flags
if curl --compressed -s -L -o "${VRS_CONFIG_DIR}/OperatorFlags.zip" ${FLAGS_LINK} && unzip -qq -o -d "${VRS_CONFIG_DIR}/flags" "${VRS_CONFIG_DIR}/OperatorFlags.zip"
then
  echo "[$APPNAME][$(date)] Operator Flags installed successfully"
else
    echo "[$APPNAME][$(date)] Operator Flags not installed - failure"
fi

#download and install pre-filled DB for operator flags
if [ ! -e "${VRS_CONFIG_DIR}/db/BaseStation.sqb" ]
 then
  if curl --compressed -s -L -o "${VRS_CONFIG_DIR}/db/BaseStation.sqb" ${FLAGSDB_LINK}
  then
    echo "[$APPNAME][$(date)] Database for Operator Flags installed successfully"
  else
      echo "[$APPNAME][$(date)] Database for Operator Flags not installed - failure"
  fi
 else
  echo "[$APPNAME][$(date)] Found an existing DB in $VRS_CONFIG_DIR, not touching anything!"
fi

# Starting VRS temporarily to create a username and password if none exist
# If VRS has been initialized previously, it will complain and exit
# If it hasn't, a username / password and a bunch of other files will be created...
#    ...and VRS will actually stay up and run. We will shut it down after a max runtime of $MAXTIME secs.
cd "${VRS_DIR}"

timeout $MAXTIME exec ${VRS_EXEC} ${VRS_CMDLINE[@]} >/dev/null 2>&1
echo "[$APPNAME][$(date)] Virtual Radar Server has been initialized."

#Injecting settings for silhouettes, OpFlags and DB into Configuration.xml
if ! grep -q "<DatabaseFileName>" "${VRS_CONFIG_DIR}/Configuration.xml"
 then
  sed -i "/^  <BaseStationSettings>.*/a \    \<DatabaseFileName>/root/.local/share/VirtualRadar/db/BaseStation.sqb</DatabaseFileName>" "${VRS_CONFIG_DIR}/Configuration.xml"
  echo "[$APPNAME][$(date)] Added database filename to Configuration.xml"
 else
  echo "[$APPNAME][$(date)] DatabaseFileName found, not touching config."
fi

if ! grep -q "<OperatorFlagsFolder>" "${VRS_CONFIG_DIR}/Configuration.xml"
 then
  sed -i "/^  <BaseStationSettings>.*/a \    \<OperatorFlagsFolder>/root/.local/share/VirtualRadar/flags</OperatorFlagsFolder>" "${VRS_CONFIG_DIR}/Configuration.xml"
  echo "[$APPNAME][$(date)] Added Operator Flags folder to Configuration.xml"
 else
  echo "[$APPNAME][$(date)] OperatorFlagsFolder found, not touching config."
fi

if ! grep -q "<SilhouettesFolder>" "${VRS_CONFIG_DIR}/Configuration.xml"
 then
  sed -i "/^  <BaseStationSettings>.*/a \    \<SilhouettesFolder>/root/.local/share/VirtualRadar/silhouettes</SilhouettesFolder>" "${VRS_CONFIG_DIR}/Configuration.xml"
  echo "[$APPNAME][$(date)] Added Silhouettes folger to Configuration.xml"
 else
  echo "[$APPNAME][$(date)] SilhouettesFolder found, not touching config."
fi

echo "[$APPNAME][$(date)] Finished basic configuration."

exit 0
